/*****************************************************************************
 * Source File:
 *    Ship : The representation of a ship
 * Author:
 *    Scott Currell
 * Summary:
 *    Draw and move the ship.
 ****************************************************************************/

#include "ship.h"

/*****************************************************************************
 * DEFAULT CONSTRUCTOR
 ****************************************************************************/
Ship :: Ship()
{
   alive = true;
   angle  = 0;
   thrust = false;
}

/*****************************************************************************
 * DRAW
 ****************************************************************************/
void Ship :: draw()
{
   drawShip(point, angle, thrust);
}

/*****************************************************************************
 * KILL
 ****************************************************************************/
void Ship :: kill()
{
   setAlive(false);
}

/*****************************************************************************
 * MOVE LEFT
 ****************************************************************************/
void Ship :: thrustLeft()
{
   angle -= SHIP_SPIN;
}

/*****************************************************************************
 * MOVE RIGHT
 ****************************************************************************/
void Ship :: thrustRight()
{
   angle += SHIP_SPIN;
}

/*****************************************************************************
 * APPLY THRUST BOTTOM
 ****************************************************************************/
void Ship :: thrustBottom()
{
   thrust = true;
   velocity.setDx(velocity.getDx() + cos((float)(90 + angle) * M_PI/180) * SHIP_THRUST);
   velocity.setDy(velocity.getDy() + sin((float)(90 + angle) * M_PI/180) * SHIP_THRUST);
}
