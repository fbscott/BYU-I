<<<<<<< HEAD
###############################################################################
# Assignment:
#   Assignment 03
#   curtis mellor, cs241
###############################################################################

'''ROBOT CONSTRUCTOR'''
class Robot:
    # initialize the robot at coordinates (10, 10) and with 100 units of fuel
=======
class Robot:
    """ Robot constructor """

>>>>>>> 6b59d98a8ab67b15503f110b4f8f07d7a0c384a0
    def __init__(self):
        self.x = 10
        self.y = 10
        self.fuel = 100

<<<<<<< HEAD
    '''
    MOVE ROBOT
    Move one unit in the specified direction: left, right, up, down.
    Each movement will decrease fuel reserves by 5.
    '''
    def move(self, direction):
        if self.fuel >= 5:
            if direction == 'left':
                self.x -= 1
            elif direction == 'right':
                self.x += 1
            elif direction == 'up':
                self.y -= 1
            elif direction == 'down':
                self.y += 1

            # decrease fuel on move
            self.fuel -= 5
        else:
            # when fuel reserves are depleted
=======
    def move(self, direction):
        """ Move robot """

        if self.fuel >= 5:
            if direction == "left":
                self.x -= 1
            elif direction == "right":
                self.x += 1
            elif direction == "up":
                self.y -= 1
            elif direction == "down":
                self.y += 1

            self.fuel -= 5
        else:
>>>>>>> 6b59d98a8ab67b15503f110b4f8f07d7a0c384a0
            self.insufficient_fuel()

        return False

<<<<<<< HEAD
    '''
    FIRE LASER
    Each time the laser is fired, fuel reserves decrease by 15.
    '''
    def fire_laser(self):
        if self.fuel >= 15:
            print('Pew! Pew!')
=======
    def fire(self):
        """ Fire weapon """

        if self.fuel >= 15:
            print("Pew! Pew!")

>>>>>>> 6b59d98a8ab67b15503f110b4f8f07d7a0c384a0
            self.fuel -= 15
        else:
            self.insufficient_fuel()

        return False

<<<<<<< HEAD
    '''DISPLAY STATUS MESSAGE'''
    def display_status(self):
        print(f'({self.x}, {self.y}) - Fuel: {self.fuel}')

    '''INSUFFICIENT FUEL MESSAGE'''
    def insufficient_fuel(self):
        print('Insufficient fuel to perform action')

'''
Prompt the user for a command: left, right, up, down, fire, status, quit
'''
def prompt_for_command():
    return input('Enter command: ')

'''Initialize the program.'''
def main():
    # new instance of Robot
    robot = Robot()
    # user-provide command
    # game will contine until command == 'quit'
    command = ''

    while command != 'quit':
        command = prompt_for_command()

        if command == 'left' or command == 'right' or command == 'up' or command == 'down':
            robot.move(command)
        elif command == 'fire':
            robot.fire_laser()
        elif command == 'status':
            robot.display_status()
        elif command == 'quit':
=======
    def display_status(self):
        """ Display status message """

        print(f"({self.x}, {self.y}) - Fuel: {self.fuel}")

    def insufficient_fuel(self):
        """ Insufficient fuel message """

        print("Insufficient fuel to perform action")

def main():
    """ Do all the things """

    # new instance of Robot
    robot = Robot()

    # game will contine while this value is "True"
    can_replay = True

    while can_replay:
        # did not include this input "prompt" in the Robot class because it's
        # specific to the game, not the Robot
        command = input("Enter command: ")

        if command == "left" or command == "right" or command == "up" or command == "down":
            robot.move(command)
        elif command == "fire":
            robot.fire()
        elif command == "status":
            robot.display_status()
        # did not include the "quit" command in the Robot class because it's
        # specific to the game, not the Robot
        elif command == "quit":
>>>>>>> 6b59d98a8ab67b15503f110b4f8f07d7a0c384a0
            print('Goodbye.')
            # end game
            can_replay = False

<<<<<<< HEAD
if __name__ == '__main__':
=======
if __name__ == "__main__":
>>>>>>> 6b59d98a8ab67b15503f110b4f8f07d7a0c384a0
    main()
